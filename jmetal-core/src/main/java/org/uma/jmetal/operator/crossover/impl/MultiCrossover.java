/**
 * This class implements a multi-crossover operator in JMetal, allowing the application of three different crossover operators: BLX-α, SBX, and Whole Arithmetic Crossover.
 * The probability of each crossover operator being executed is determined by the probabilities pBLXAlpha, pSBX, and pWholeArithmetic respectively.
 */
package org.uma.jmetal.operator.crossover.impl;

import java.util.List;

import org.uma.jmetal.operator.crossover.CrossoverOperator;
import org.uma.jmetal.solution.doublesolution.DoubleSolution;
import org.uma.jmetal.solution.doublesolution.repairsolution.RepairDoubleSolution;
import org.uma.jmetal.util.errorchecking.Check;
import org.uma.jmetal.util.pseudorandom.JMetalRandom;
import org.uma.jmetal.util.pseudorandom.RandomGenerator;

public class MultiCrossover implements CrossoverOperator<DoubleSolution> {
    private double probability;
    private RandomGenerator<Double> randomGenerator;
    private BLXAlphaCrossover operatorBLXAlpha;
    private double pBLXAlpha;
    private SBXCrossover operatorSBX;
    private double pSBX;
    private WholeArithmeticCrossover operatorWholeArithmetic;
    private double pWholeArithmetic;

    /**
     * Constructor that initializes the multi-crossover operator.
     * @param probability Global crossover probability.
     * @param solutionRepair Solution repairer.
     * @param pBLXAlpha Probability of executing the BLX-α operator.
     * @param pSBX Probability of executing the SBX operator.
     * @param pWholeArithmetic Probability of executing the Whole Arithmetic Crossover operator.
     * @param alphaBLX Alpha parameter for the BLX-α operator.
     * @param distributionIndexSBX Distribution index for the SBX operator.
     */
    public MultiCrossover(double probability, RepairDoubleSolution solutionRepair, double pBLXAlpha, double pSBX, double pWholeArithmetic, double alphaBLX, double distributionIndexSBX) {
        this.probability = probability;
        this.randomGenerator = () -> JMetalRandom.getInstance().nextDouble();

        this.operatorBLXAlpha = new BLXAlphaCrossover(probability, alphaBLX, solutionRepair, randomGenerator);
        this.operatorSBX = new SBXCrossover(probability, distributionIndexSBX, solutionRepair, randomGenerator);
        this.operatorWholeArithmetic = new WholeArithmeticCrossover(probability, solutionRepair, randomGenerator);

        double sum = pBLXAlpha + pSBX + pWholeArithmetic;
        this.pBLXAlpha = pBLXAlpha / sum;
        this.pSBX = pSBX / sum;
        this.pWholeArithmetic = pWholeArithmetic / sum;
    }

    /**
     * Executes the multi-crossover operator on a list of solutions.
     * @param solutions List of solutions to be crossed.
     * @return List of resulting solutions after applying the crossover operator.
     */
    @Override
    public List<DoubleSolution> execute(List<DoubleSolution> solutions) {
        Check.notNull(solutions);
        Check.that(solutions.size() == 2, "There must be two parents instead of " + solutions.size());

        double r = randomGenerator.getRandomValue();
        if (r <= pBLXAlpha) {
            return operatorBLXAlpha.execute(solutions);
        } else if (r <= pBLXAlpha + pSBX) {
            return operatorSBX.execute(solutions);
        } else {
            return operatorWholeArithmetic.execute(solutions);
        }
    }

    /**
     * Gets the global crossover probability.
     * @return The global crossover probability.
     */
    @Override
    public double crossoverProbability() {
        return probability;
    }

    /**
     * Gets the probability of executing the BLX-α operator.
     * @return The probability of executing the BLX-α operator.
     */
    public double pBLXAlpha() {
        return pBLXAlpha;
    }

    /**
     * Gets the probability of executing the SBX operator.
     * @return The probability of executing the SBX operator.
     */
    public double pSBX() {
        return pSBX;
    }

    /**
     * Gets the probability of executing the Whole Arithmetic Crossover operator.
     * @return The probability of executing the Whole Arithmetic Crossover operator.
     */
    public double pWholeArithmetic() {
        return pWholeArithmetic;
    }

    /**
     * Gets the number of parents required by the crossover operator.
     * @return The number of parents required by the crossover operator.
     */
    @Override
    public int numberOfRequiredParents() {
        return 2;
    }

    /**
     * Gets the number of children generated by the crossover operator.
     * @return The number of children generated by the crossover operator.
     */
    @Override
    public int numberOfGeneratedChildren() {
        return 2;
    }
}
